#spring.datasource.url = jdbc:h2:mem:bookingdb
#spring.datasource.driverClassName = org.h2.Driver
#spring.datasource.username = sa
#spring.datasource.password = sa
#spring.jpa.database-platform = org.hibernate.dialect.H2Dialect
#spring.h2.console.enabled = true
#spring.jpa.hibernate.ddl-auto = update
#spring.jpa.show-sql = true
#server.port=9090

spring.jpa.database=postgresql
spring.datasource.url = jdbc:postgresql://localhost:5432/udemy_alfredo_leal
#spring.datasource.url = jdbc:postgresql://docker-postgresql:5432/udemy_alfredo_leal
spring.datasource.username = gaspar
spring.datasource.password = 123
spring.datasource.hikari.maximum-pool-size = 20
spring.jpa.hibernate.ddl-auto = update
server.port=9090

#configuracion config server
spring.application.name = hotels
spring.profiles.active = dev
spring.config.import = optional:configserver:http://localhost:9095

eureka.instance.preferIpAddress = true
eureka.client.registerWithEureka= true
eureka.client.fetchRegistry= true
eureka.client.serviceUrl.defaultZone = http://localhost:8065/eureka/

#para ver con actuator
info.app.name=Hotel Microservice
info.app.description = application to reserver rooms
info.app.version = 1.0.0
endpoint.shutdown.enabled=true
management.info.env.enabled=true
management.endpoint.shutdown.enabled=true
management.endpoints.web.exposure.include=*

#Configuracion de circuit braker

resilience4j.circuitbreaker.configs.default.registerHealthIndicator = true
# 4 intentos totales para iniciarlo, 50%(osea 2 veces), 20_000 milisegundos de espera, permite 3 llamadas en semiabierto
# https://resilience4j.readme.io/docs/circuitbreaker
resilience4j.circuitbreaker.instances.roomsByHotelCB.minimumNumberOfCalls = 4
resilience4j.circuitbreaker.instances.roomsByHotelCB.failureRateThreshold = 50                                                     
resilience4j.circuitbreaker.instances.roomsByHotelCB.waitDurationInOpenState = 20000
resilience4j.circuitbreaker.instances.roomsByHotelCB.permittedNumberOfCallsInHalfOpenState = 3




